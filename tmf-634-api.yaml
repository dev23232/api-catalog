apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: tmf634
  description: TMF 634 Resource Catalog Management
  tags:
    - tmf
    - tmf639
  links:
    - url: https://openslice-1.euprojects.net/tmf-api/swagger-ui/index.html?urls.primaryName=tmf-api-634-ResourceCatalogManagement-v4.0.0
      title: Swagger
      icon: code
spec:
  type: openapi
  lifecycle: experimental
  owner: UOP
  definition: |
    {
  "openapi" : "3.0.1",
  "info" : {
    "title" : "TMF 634 Resource Catalog Management",
    "description" : "## TMF API Reference: TMF 634 Resource Catalog Management",
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://openslice.io"
    },
    "version" : "4.0.0"
  },
  "externalDocs" : {
    "description" : "TMF API Tables",
    "url" : "https://www.tmforum.org/oda/open-apis/table"
  },
  "servers" : [ {
    "url" : "http://openslice-1.euprojects.net/tmf-api",
    "description" : "Generated server url"
  } ],
  "security" : [ {
    "security_auth" : [ ]
  } ],
  "tags" : [ {
    "name" : "resourceCandidate",
    "description" : "the resourceCandidate API"
  }, {
    "name" : "resourceSpecification",
    "description" : "the resourceSpecification API"
  }, {
    "name" : "listener",
    "description" : "the listener API"
  }, {
    "name" : "exportJob",
    "description" : "the exportJob API"
  }, {
    "name" : "importJob",
    "description" : "the importJob API"
  }, {
    "name" : "resourceCatalog",
    "description" : "the resourceCatalog API"
  }, {
    "name" : "hub",
    "description" : "the hub API"
  }, {
    "name" : "resourceCategory",
    "description" : "the resourceCategory API"
  } ],
  "paths" : {
    "/resourceCatalogManagement/v4/resourceSpecification" : {
      "get" : {
        "tags" : [ "resourceSpecification" ],
        "summary" : "List or find ResourceSpecification objects",
        "description" : "This operation list or find ResourceSpecification entities",
        "operationId" : "listResourceSpecification",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-separated properties to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Requested index for start of resources to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Requested number of resources to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceSpecification"
                  }
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceSpecification"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceSpecification"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceSpecification"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceSpecification"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceSpecification"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceSpecification"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceSpecification"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "resourceSpecification" ],
        "summary" : "Creates a ResourceSpecification",
        "description" : "This operation creates a ResourceSpecification entity.",
        "operationId" : "createResourceSpecification",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/JsonNode"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "400" : {
            "description" : "Created",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/resourceSpecification/{id}/attachment" : {
      "post" : {
        "tags" : [ "resourceSpecification" ],
        "summary" : "Adds an attachment to a 'ResourceSpecification'",
        "description" : "This operation adds an attachment to a ResourceSpecification",
        "operationId" : "addAttachmentToResourceSpec",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ResourceSpecification",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "afile" : {
                    "type" : "string",
                    "description" : "The Attachment file to be added",
                    "format" : "binary"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "400" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/resourceCategory" : {
      "get" : {
        "tags" : [ "resourceCategory" ],
        "summary" : "List or find ResourceCategory objects",
        "description" : "This operation list or find ResourceCategory entities",
        "operationId" : "listResourceCategory",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-separated properties to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Requested index for start of resources to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Requested number of resources to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCategory"
                  }
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCategory"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCategory"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCategory"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCategory"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCategory"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCategory"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCategory"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "resourceCategory" ],
        "summary" : "Creates a ResourceCategory",
        "description" : "This operation creates a ResourceCategory entity.",
        "operationId" : "createResourceCategory",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceCategoryCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "400" : {
            "description" : "Created",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/resourceCatalog" : {
      "get" : {
        "tags" : [ "resourceCatalog" ],
        "summary" : "List or find ResourceCatalog objects",
        "description" : "This operation list or find ResourceCatalog entities",
        "operationId" : "listResourceCatalog",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-separated properties to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Requested index for start of resources to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Requested number of resources to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCatalog"
                  }
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCatalog"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCatalog"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCatalog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCatalog"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCatalog"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCatalog"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCatalog"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "resourceCatalog" ],
        "summary" : "Creates a ResourceCatalog",
        "description" : "This operation creates a ResourceCatalog entity.",
        "operationId" : "createResourceCatalog",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceCatalogCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "400" : {
            "description" : "Created",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/resourceCandidate" : {
      "get" : {
        "tags" : [ "resourceCandidate" ],
        "summary" : "List or find ResourceCandidate objects",
        "description" : "This operation list or find ResourceCandidate entities",
        "operationId" : "listResourceCandidate",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-separated properties to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Requested index for start of resources to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Requested number of resources to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCandidate"
                  }
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCandidate"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCandidate"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCandidate"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCandidate"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCandidate"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCandidate"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ResourceCandidate"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "resourceCandidate" ],
        "summary" : "Creates a ResourceCandidate",
        "description" : "This operation creates a ResourceCandidate entity.",
        "operationId" : "createResourceCandidate",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceCandidateCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "400" : {
            "description" : "Created",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/resourceSpecificationDeleteEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ResourceSpecificationDeleteEvent",
        "description" : "Example of a client listener for receiving the notification ResourceSpecificationDeleteEvent",
        "operationId" : "listenToResourceSpecificationDeleteEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceSpecificationDeleteEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/resourceSpecificationCreateEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ResourceSpecificationCreateEvent",
        "description" : "Example of a client listener for receiving the notification ResourceSpecificationCreateEvent",
        "operationId" : "listenToResourceSpecificationCreateEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceSpecificationCreateEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/resourceSpecificationChangeEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ResourceSpecificationChangeEvent",
        "description" : "Example of a client listener for receiving the notification ResourceSpecificationChangeEvent",
        "operationId" : "listenToResourceSpecificationChangeEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceSpecificationChangeEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/resourceCategoryDeleteEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ResourceCategoryDeleteEvent",
        "description" : "Example of a client listener for receiving the notification ResourceCategoryDeleteEvent",
        "operationId" : "listenToResourceCategoryDeleteEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceCategoryDeleteEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/resourceCategoryCreateEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ResourceCategoryCreateEvent",
        "description" : "Example of a client listener for receiving the notification ResourceCategoryCreateEvent",
        "operationId" : "listenToResourceCategoryCreateEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceCategoryCreateEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/resourceCategoryChangeEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ResourceCategoryChangeEvent",
        "description" : "Example of a client listener for receiving the notification ResourceCategoryChangeEvent",
        "operationId" : "listenToResourceCategoryChangeEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceCategoryChangeEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/resourceCatalogDeleteEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ResourceCatalogDeleteEvent",
        "description" : "Example of a client listener for receiving the notification ResourceCatalogDeleteEvent",
        "operationId" : "listenToResourceCatalogDeleteEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceCatalogDeleteEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/resourceCatalogCreateEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ResourceCatalogCreateEvent",
        "description" : "Example of a client listener for receiving the notification ResourceCatalogCreateEvent",
        "operationId" : "listenToResourceCatalogCreateEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceCatalogCreateEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/resourceCatalogChangeEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ResourceCatalogChangeEvent",
        "description" : "Example of a client listener for receiving the notification ResourceCatalogChangeEvent",
        "operationId" : "listenToResourceCatalogChangeEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceCatalogChangeEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/resourceCandidateDeleteEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ResourceCandidateDeleteEvent",
        "description" : "Example of a client listener for receiving the notification ResourceCandidateDeleteEvent",
        "operationId" : "listenToResourceCandidateDeleteEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceCandidateDeleteEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/resourceCandidateCreateEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ResourceCandidateCreateEvent",
        "description" : "Example of a client listener for receiving the notification ResourceCandidateCreateEvent",
        "operationId" : "listenToResourceCandidateCreateEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceCandidateCreateEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/resourceCandidateChangeEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ResourceCandidateChangeEvent",
        "description" : "Example of a client listener for receiving the notification ResourceCandidateChangeEvent",
        "operationId" : "listenToResourceCandidateChangeEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceCandidateChangeEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/importJobStateChangeEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ImportJobStateChangeEvent",
        "description" : "Example of a client listener for receiving the notification ImportJobStateChangeEvent",
        "operationId" : "listenToImportJobStateChangeEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImportJobStateChangeEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/importJobCreateEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ImportJobCreateEvent",
        "description" : "Example of a client listener for receiving the notification ImportJobCreateEvent",
        "operationId" : "listenToImportJobCreateEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImportJobCreateEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/exportJobStateChangeEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ExportJobStateChangeEvent",
        "description" : "Example of a client listener for receiving the notification ExportJobStateChangeEvent",
        "operationId" : "listenToExportJobStateChangeEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExportJobStateChangeEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/listener/exportJobCreateEvent" : {
      "post" : {
        "tags" : [ "listener", "notification listeners (client side)" ],
        "summary" : "Client listener for entity ExportJobCreateEvent",
        "description" : "Example of a client listener for receiving the notification ExportJobCreateEvent",
        "operationId" : "listenToExportJobCreateEvent",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExportJobCreateEvent"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/hub" : {
      "post" : {
        "tags" : [ "hub", "events subscription" ],
        "summary" : "Register a listener",
        "description" : "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId" : "registerListener",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/EventSubscriptionInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "Subscribed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscription"
                }
              }
            }
          }
        }
      }
    },
    "/importJob" : {
      "get" : {
        "tags" : [ "importJob" ],
        "summary" : "List or find ImportJob objects",
        "description" : "This operation list or find ImportJob entities",
        "operationId" : "listImportJob",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-separated properties to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Requested index for start of resources to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Requested number of resources to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ImportJob"
                  }
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ImportJob"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ImportJob"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ImportJob"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ImportJob"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ImportJob"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ImportJob"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ImportJob"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "importJob" ],
        "summary" : "Creates a ImportJob",
        "description" : "This operation creates a ImportJob entity.",
        "operationId" : "createImportJob",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImportJobCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportJob"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportJob"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportJob"
                }
              }
            }
          },
          "400" : {
            "description" : "Created",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportJob"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportJob"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportJob"
                }
              }
            }
          }
        }
      }
    },
    "/exportJob" : {
      "get" : {
        "tags" : [ "exportJob" ],
        "summary" : "List or find ExportJob objects",
        "description" : "This operation list or find ExportJob entities",
        "operationId" : "listExportJob",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-separated properties to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Requested index for start of resources to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Requested number of resources to be provided in response",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExportJob"
                  }
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExportJob"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExportJob"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExportJob"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExportJob"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExportJob"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExportJob"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ExportJob"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "exportJob" ],
        "summary" : "Creates a ExportJob",
        "description" : "This operation creates a ExportJob entity.",
        "operationId" : "createExportJob",
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExportJobCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportJob"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportJob"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportJob"
                }
              }
            }
          },
          "400" : {
            "description" : "Created",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportJob"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportJob"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportJob"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/resourceSpecification/{id}" : {
      "get" : {
        "tags" : [ "resourceSpecification" ],
        "summary" : "Retrieves a ResourceSpecification by ID",
        "description" : "This operation retrieves a ResourceSpecification entity. Attribute selection is enabled for all first level attributes.",
        "operationId" : "retrieveResourceSpecification",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ResourceSpecification",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-separated properties to provide in response",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "resourceSpecification" ],
        "summary" : "Deletes a ResourceSpecification",
        "description" : "This operation deletes a ResourceSpecification entity.",
        "operationId" : "deleteResourceSpecification",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ResourceSpecification",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error"
          },
          "204" : {
            "description" : "Deleted"
          },
          "409" : {
            "description" : "Conflict"
          },
          "404" : {
            "description" : "Not Found"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "405" : {
            "description" : "Method Not allowed"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      },
      "patch" : {
        "tags" : [ "resourceSpecification" ],
        "summary" : "Updates partially a ResourceSpecification",
        "description" : "This operation updates partially a ResourceSpecification entity.",
        "operationId" : "patchResourceSpecification",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ResourceSpecification",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceSpecificationUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "200" : {
            "description" : "Updated",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceSpecification"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/resourceCategory/{id}" : {
      "get" : {
        "tags" : [ "resourceCategory" ],
        "summary" : "Retrieves a ResourceCategory by ID",
        "description" : "This operation retrieves a ResourceCategory entity. Attribute selection is enabled for all first level attributes.",
        "operationId" : "retrieveResourceCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ResourceCategory",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-separated properties to provide in response",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "resourceCategory" ],
        "summary" : "Deletes a ResourceCategory",
        "description" : "This operation deletes a ResourceCategory entity.",
        "operationId" : "deleteResourceCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the Resource Category",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error"
          },
          "204" : {
            "description" : "Deleted"
          },
          "409" : {
            "description" : "Conflict"
          },
          "404" : {
            "description" : "Not Found"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "405" : {
            "description" : "Method Not allowed"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      },
      "patch" : {
        "tags" : [ "resourceCategory" ],
        "summary" : "Updates partially a ResourceCategory",
        "description" : "This operation updates partially a ResourceCategory entity.",
        "operationId" : "patchResourceCategory",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ResourceCategory",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceCategoryUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "200" : {
            "description" : "Updated",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCategory"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/resourceCatalog/{id}" : {
      "get" : {
        "tags" : [ "resourceCatalog" ],
        "summary" : "Retrieves a ResourceCatalog by ID",
        "description" : "This operation retrieves a ResourceCatalog entity. Attribute selection is enabled for all first level attributes.",
        "operationId" : "retrieveResourceCatalog",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ResourceCatalog",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-separated properties to provide in response",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "resourceCatalog" ],
        "summary" : "Deletes a ResourceCatalog",
        "description" : "This operation deletes a ResourceCatalog entity.",
        "operationId" : "deleteResourceCatalog",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ResourceCatalog",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error"
          },
          "204" : {
            "description" : "Deleted"
          },
          "409" : {
            "description" : "Conflict"
          },
          "404" : {
            "description" : "Not Found"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "405" : {
            "description" : "Method Not allowed"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      },
      "patch" : {
        "tags" : [ "resourceCatalog" ],
        "summary" : "Updates partially a ResourceCatalog",
        "description" : "This operation updates partially a ResourceCatalog entity.",
        "operationId" : "patchResourceCatalog",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ResourceCatalog",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceCatalogUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "200" : {
            "description" : "Updated",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCatalog"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/resourceCandidate/{id}" : {
      "get" : {
        "tags" : [ "resourceCandidate" ],
        "summary" : "Retrieves a ResourceCandidate by ID",
        "description" : "This operation retrieves a ResourceCandidate entity. Attribute selection is enabled for all first level attributes.",
        "operationId" : "retrieveResourceCandidate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ResourceCandidate",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-separated properties to provide in response",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "resourceCandidate" ],
        "summary" : "Deletes a ResourceCandidate",
        "description" : "This operation deletes a ResourceCandidate entity.",
        "operationId" : "deleteResourceCandidate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ResourceCandidate",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error"
          },
          "204" : {
            "description" : "Deleted"
          },
          "409" : {
            "description" : "Conflict"
          },
          "404" : {
            "description" : "Not Found"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "405" : {
            "description" : "Method Not allowed"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      },
      "patch" : {
        "tags" : [ "resourceCandidate" ],
        "summary" : "Updates partially a ResourceCandidate",
        "description" : "This operation updates partially a ResourceCandidate entity.",
        "operationId" : "patchResourceCandidate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ResourceCandidate",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json;charset=utf-8" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceCandidateUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "200" : {
            "description" : "Updated",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceCandidate"
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/resourceSpecification/{id}/attachment/{attid}" : {
      "get" : {
        "tags" : [ "resourceSpecification" ],
        "summary" : "Get an attachment from a 'ResourceSpecification'",
        "description" : "This operation gets an attachment",
        "operationId" : "getAttachment",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ResourceSpecification",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attid",
          "in" : "path",
          "description" : "Identifier of the Attachment",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/resourceSpecification/{id}/attachment/{attid}/{afilename}" : {
      "get" : {
        "tags" : [ "resourceSpecification" ],
        "summary" : "Get an attachment from a 'ResourceSpecification' with filename",
        "description" : "This operation gets an attachment",
        "operationId" : "getAttachmentWithFilename",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ResourceSpecification",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attid",
          "in" : "path",
          "description" : "Identifier of the Attachment",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "afilename",
          "in" : "path",
          "description" : "Identifier of the Filename",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/importJob/{id}" : {
      "get" : {
        "tags" : [ "importJob" ],
        "summary" : "Retrieves a ImportJob by ID",
        "description" : "This operation retrieves a ImportJob entity. Attribute selection is enabled for all first level attributes.",
        "operationId" : "retrieveImportJob",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ImportJob",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-separated properties to provide in response",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportJob"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportJob"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportJob"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportJob"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportJob"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportJob"
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportJob"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportJob"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "importJob" ],
        "summary" : "Deletes a ImportJob",
        "description" : "This operation deletes a ImportJob entity.",
        "operationId" : "deleteImportJob",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ImportJob",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error"
          },
          "204" : {
            "description" : "Deleted"
          },
          "409" : {
            "description" : "Conflict"
          },
          "404" : {
            "description" : "Not Found"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "405" : {
            "description" : "Method Not allowed"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/exportJob/{id}" : {
      "get" : {
        "tags" : [ "exportJob" ],
        "summary" : "Retrieves a ExportJob by ID",
        "description" : "This operation retrieves a ExportJob entity. Attribute selection is enabled for all first level attributes.",
        "operationId" : "retrieveExportJob",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ExportJob",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-separated properties to provide in response",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportJob"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportJob"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportJob"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportJob"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportJob"
                }
              }
            }
          },
          "405" : {
            "description" : "Method Not allowed",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportJob"
                }
              }
            }
          },
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportJob"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json;charset=utf-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExportJob"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "exportJob" ],
        "summary" : "Deletes a ExportJob",
        "description" : "This operation deletes a ExportJob entity.",
        "operationId" : "deleteExportJob",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Identifier of the ExportJob",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error"
          },
          "204" : {
            "description" : "Deleted"
          },
          "409" : {
            "description" : "Conflict"
          },
          "404" : {
            "description" : "Not Found"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "405" : {
            "description" : "Method Not allowed"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/resourceCatalogManagement/v4/hub/{id}" : {
      "delete" : {
        "tags" : [ "hub", "events subscription" ],
        "summary" : "Unregister a listener",
        "description" : "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "operationId" : "unregisterListener",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the registered listener",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "500" : {
            "description" : "Internal Server Error"
          },
          "400" : {
            "description" : "Bad request"
          },
          "204" : {
            "description" : "Deleted"
          },
          "405" : {
            "description" : "Method not allowed"
          },
          "404" : {
            "description" : "Not Found"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "JsonNode" : {
        "type" : "object",
        "description" : "The ResourceSpecification to be created"
      },
      "Any" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          },
          "alias" : {
            "type" : "string"
          }
        },
        "description" : "The value that the characteristic can take on. If the value is a complex type, the definition of the type should be found by the link as defined in @schemaLocation"
      },
      "AttachmentRefOrValue" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "atReferredType" : {
            "type" : "string",
            "description" : "The actual type of the target instance when needed for disambiguation."
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "description" : "Unique reference of the entity"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the entity"
          },
          "id" : {
            "type" : "string",
            "description" : "Unique identifier for this particular attachment",
            "example" : "4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "attachmentType" : {
            "type" : "string",
            "description" : "Attachment type such as video, picture",
            "example" : "video"
          },
          "content" : {
            "type" : "string",
            "description" : "The actual contents of the attachment object, if embedded, encoded as base64"
          },
          "description" : {
            "type" : "string",
            "description" : "A narrative text describing the content of the attachment",
            "example" : "Photograph of the Product"
          },
          "mimeType" : {
            "type" : "string",
            "description" : "Attachment mime type such as extension file for video, picture and document"
          },
          "url" : {
            "type" : "string",
            "description" : "Uniform Resource Locator, is a web page address (a subset of URI)",
            "example" : "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f"
          },
          "size" : {
            "$ref" : "#/components/schemas/Quantity"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "@referredType" : {
            "type" : "string"
          }
        },
        "description" : "An attachment by value or by reference. An attachment complements the description of an element, for example through a document, a video, a picture."
      },
      "ConstraintRef" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "atReferredType" : {
            "type" : "string",
            "description" : "The (class) type of the referred constraint"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "description" : "Hyperlink reference to the target constraint"
          },
          "name" : {
            "type" : "string",
            "description" : "Name given to the constraint"
          },
          "id" : {
            "type" : "string",
            "description" : "reference id to the target constraint"
          },
          "version" : {
            "type" : "string",
            "description" : "constraint version"
          },
          "@referredType" : {
            "type" : "string"
          }
        },
        "description" : "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec."
      },
      "FeatureSpecification" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "atBaseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "atSchemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "atType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "description" : "Unique reference of the entity"
          },
          "name" : {
            "type" : "string",
            "description" : "Unique name given to the feature specification"
          },
          "id" : {
            "type" : "string",
            "description" : "Identifier of the feature specification. Must be locally unique within the containing resource specification, thus allowing direct access to the feature spec."
          },
          "isBundle" : {
            "type" : "boolean",
            "description" : "A flag indicating if this is a feature group (true) or not (false)"
          },
          "isEnabled" : {
            "type" : "boolean",
            "description" : "A flag indicating if the feature is enabled (true) or not (false)"
          },
          "version" : {
            "type" : "string",
            "description" : "Version of the feature specification"
          },
          "constraint" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "This is a list of feature constraints",
            "items" : {
              "$ref" : "#/components/schemas/ConstraintRef"
            }
          },
          "featureSpecCharacteristic" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "This is a list of characteristics for a particular feature",
            "items" : {
              "$ref" : "#/components/schemas/FeatureSpecificationCharacteristic"
            }
          },
          "featureSpecRelationship" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "A dependency, exclusivity or aggratation relationship between/among feature specifications.",
            "items" : {
              "$ref" : "#/components/schemas/FeatureSpecificationRelationship"
            }
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          }
        },
        "description" : "Specification for applicable configuration features for a resource specification."
      },
      "FeatureSpecificationCharacteristic" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "lastUpdate" : {
            "type" : "string",
            "description" : "Date and time of the last update"
          },
          "atValueSchemaLocation" : {
            "type" : "string",
            "description" : "This (optional) field provides a link to the schema describing the value type."
          },
          "lifecycleStatusEnum" : {
            "type" : "string",
            "writeOnly" : true,
            "enum" : [ "In study", "In design", "In test", "Active", "Launched", "Retired", "Obsolete", "Rejected" ]
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "description" : "Unique reference of the entity"
          },
          "name" : {
            "type" : "string",
            "description" : "This is the name for the feature charateristic."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of this catalog"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "description" : "Used to indicate the current lifecycle status"
          },
          "version" : {
            "type" : "string",
            "description" : "Entity version"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "configurable" : {
            "type" : "boolean",
            "description" : "True is the feature is configurable."
          },
          "extensible" : {
            "type" : "boolean",
            "description" : "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a feature."
          },
          "isUnique" : {
            "type" : "boolean",
            "description" : "An indicator that specifies if a value is unique for the specification."
          },
          "maxCardinality" : {
            "type" : "integer",
            "description" : "The maximum number of instances a CharacteristicValue can take on.",
            "format" : "int32"
          },
          "minCardinality" : {
            "type" : "integer",
            "description" : "The minimum number of instances a CharacteristicValue can take on.",
            "format" : "int32"
          },
          "regex" : {
            "type" : "string",
            "description" : "A rule or principle represented in regular expression used to derive the value of a characteristic value."
          },
          "valueType" : {
            "type" : "string",
            "description" : "A kind of value that the characteristic can take on."
          },
          "featureSpecCharRelationship" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "An aggregation, migration, substitution, dependency or exclusivity relationship between/among feature characteristics.",
            "items" : {
              "$ref" : "#/components/schemas/FeatureSpecificationCharacteristicRelationship"
            }
          },
          "featureSpecCharacteristicValue" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a FeatureCharacteristic object.",
            "items" : {
              "$ref" : "#/components/schemas/FeatureSpecificationCharacteristicValue"
            }
          }
        },
        "description" : "Configuration feature characteristic specification."
      },
      "FeatureSpecificationCharacteristicRelationship" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "description" : "Unique reference of the entity"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the target characteristic"
          },
          "characteristicId" : {
            "type" : "string",
            "description" : "Unique identifier of the characteristic within the the target feature specification"
          },
          "featureId" : {
            "type" : "string",
            "description" : "Unique identifier of the target feature specification within the resource specification."
          },
          "relationshipType" : {
            "type" : "string",
            "description" : "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
          },
          "resourceSpecificationHref" : {
            "type" : "string",
            "description" : "Hyperlink reference to the resource specification containing the target feature and feature characteristic"
          },
          "resourceSpecificationId" : {
            "type" : "string",
            "description" : "Unique identifier of the resource specification containing the target feature and feature characteristic"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          }
        },
        "description" : "An aggregation, migration, substitution, dependency or exclusivity relationship between/among FeatureSpecificationCharacteristics."
      },
      "FeatureSpecificationCharacteristicValue" : {
        "required" : [ "valueType" ],
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "atBaseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "atSchemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "atType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "description" : "Unique reference of the entity"
          },
          "isDefault" : {
            "type" : "boolean",
            "description" : "True if the value is the default value for a characteristic."
          },
          "rangeInterval" : {
            "type" : "string",
            "description" : "Specifies the inclusion or exclusion of the valueFrom and valueTo attributes."
          },
          "regex" : {
            "type" : "string",
            "description" : "A regular expression constraint for given value."
          },
          "unitOfMeasure" : {
            "type" : "string",
            "description" : "A determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values."
          },
          "valueFrom" : {
            "type" : "integer",
            "description" : "The low range value that a characteristic can take on.",
            "format" : "int32"
          },
          "valueTo" : {
            "type" : "integer",
            "description" : "The upper range value that a characteristic can take on.",
            "format" : "int32"
          },
          "valueType" : {
            "type" : "string",
            "description" : "A kind of value that the characteristic value can take on."
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "value" : {
            "$ref" : "#/components/schemas/Any"
          }
        },
        "description" : "A number or text that can be assigned to a FeatureSpecificationCharacteristic."
      },
      "FeatureSpecificationRelationship" : {
        "required" : [ "name", "relationshipType" ],
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "lastUpdate" : {
            "type" : "string",
            "description" : "Date and time of the last update"
          },
          "atBaseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "atSchemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "atType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "lifecycleStatusEnum" : {
            "type" : "string",
            "writeOnly" : true,
            "enum" : [ "In study", "In design", "In test", "Active", "Launched", "Retired", "Obsolete", "Rejected" ]
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "description" : "Unique reference of the entity"
          },
          "name" : {
            "type" : "string",
            "description" : "This is the name of the target feature specification."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of this catalog"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "description" : "Used to indicate the current lifecycle status"
          },
          "version" : {
            "type" : "string",
            "description" : "Entity version"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "featureId" : {
            "type" : "string",
            "description" : "Unique identifier of the target feature specification."
          },
          "relationshipType" : {
            "type" : "string",
            "description" : "This is the type of the feature specification relationship."
          },
          "resourceSpecificationHref" : {
            "type" : "string",
            "description" : "Hyperlink reference to the resource specification containing the target feature"
          },
          "resourceSpecificationId" : {
            "type" : "string",
            "description" : "Unique identifier of the resource specification containing the target feature"
          }
        },
        "description" : "Configuration feature"
      },
      "Quantity" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "number",
            "description" : "Numeric value in a given unit",
            "format" : "float"
          },
          "units" : {
            "type" : "string",
            "description" : "Unit"
          }
        },
        "description" : "An amount in a given unit"
      },
      "RelatedParty" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "description" : "Unique reference of the entity"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the entity"
          },
          "role" : {
            "type" : "string",
            "description" : "Role of the related party."
          },
          "@referredType" : {
            "type" : "string",
            "description" : "The actual type of the target instance when needed for disambiguation."
          },
          "id" : {
            "type" : "string"
          },
          "extendedInfo" : {
            "type" : "string"
          }
        },
        "description" : "RelatedParty reference. A related party defines party or party role linked to a specific entity."
      },
      "ResourceSpecCharRelationship" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "relationshipType" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the target characteristic"
          },
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of the target specification"
          },
          "href" : {
            "type" : "string",
            "description" : "Hyperlink reference to the target specification"
          },
          "@type" : {
            "type" : "string",
            "description" : "class type of target specification"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          }
        },
        "description" : "An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics."
      },
      "ResourceSpecification" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "lastUpdate" : {
            "type" : "string",
            "description" : "Date and time of the last update"
          },
          "atSchemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "lifecycleStatusEnum" : {
            "type" : "string",
            "writeOnly" : true,
            "enum" : [ "In study", "In design", "In test", "Active", "Launched", "Retired", "Obsolete", "Rejected" ]
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "href" : {
            "type" : "string",
            "description" : "Hyperlink reference to this REST resource"
          },
          "name" : {
            "type" : "string",
            "description" : "Name given to this REST resource"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of this REST resource"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "description" : "Used to indicate the current lifecycle status of the resource specification"
          },
          "version" : {
            "type" : "string",
            "description" : "Resource Specification version"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of this REST resource"
          },
          "isBundle" : {
            "type" : "boolean",
            "description" : "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
          },
          "category" : {
            "type" : "string",
            "description" : "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
          },
          "targetResourceSchema" : {
            "$ref" : "#/components/schemas/TargetResourceSchema"
          },
          "attachment" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Complements the description of an element (for instance a resource) through video, pictures ...",
            "items" : {
              "$ref" : "#/components/schemas/AttachmentRefOrValue"
            }
          },
          "featureSpecification" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "A list of Features for this specification.",
            "items" : {
              "$ref" : "#/components/schemas/FeatureSpecification"
            }
          },
          "relatedParty" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RelatedParty"
            }
          },
          "resourceSpecCharacteristic" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
            "items" : {
              "$ref" : "#/components/schemas/ResourceSpecificationCharacteristic"
            }
          },
          "resourceSpecRelationship" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
            "items" : {
              "$ref" : "#/components/schemas/ResourceSpecificationRelationship"
            }
          }
        },
        "description" : "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components. A ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification."
      },
      "ResourceSpecificationCharacteristic" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "resourceSpecificationCharacteristicValue" : {
            "uniqueItems" : true,
            "type" : "array",
            "writeOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ResourceSpecificationCharacteristicValue"
            }
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A link to the schema describing this characteristic specification"
          },
          "@type" : {
            "type" : "string",
            "description" : "(Class) type of the ResourceSpecificationCharacteristic"
          },
          "href" : {
            "type" : "string",
            "description" : "Unique reference of the entity"
          },
          "name" : {
            "type" : "string",
            "description" : "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
          },
          "description" : {
            "type" : "string",
            "description" : "A narrative that explains the CharacteristicSpecification."
          },
          "valueType" : {
            "type" : "string",
            "description" : "A kind of value that the characteristic can take on, such as numeric, text and so forth"
          },
          "configurable" : {
            "type" : "boolean",
            "description" : "If true, the Boolean indicates that the ResourceSpecificationCharacteristic is configurable"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "@valueSchemaLocation" : {
            "type" : "string",
            "description" : "This (optional) field provides a link to the schema describing the value type"
          },
          "minCardinality" : {
            "type" : "integer",
            "description" : "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality.",
            "format" : "int32"
          },
          "maxCardinality" : {
            "type" : "integer",
            "description" : "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality.",
            "format" : "int32"
          },
          "isUnique" : {
            "type" : "boolean",
            "description" : "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
          },
          "regex" : {
            "type" : "string",
            "description" : "A rule or principle represented in regular expression used to derive the value of a characteristic value."
          },
          "extensible" : {
            "type" : "boolean",
            "description" : "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource."
          },
          "resourceSpecCharRelationship" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceSpecCharRelationship"
            }
          },
          "resourceSpecCharacteristicValue" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceSpecificationCharacteristicValue"
            }
          }
        },
        "description" : "This class defines the characteristic features of a resource specification. Every ResourceSpecification has a variety of important attributes, methods, constraints, and relationships, which distinguish a resource specification from other resource specifications."
      },
      "ResourceSpecificationCharacteristicValue" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "This (optional) field provides a link to the schema describing the value type"
          },
          "@type" : {
            "type" : "string",
            "description" : "The class type of a complex value type"
          },
          "href" : {
            "type" : "string",
            "description" : "Unique reference of the entity"
          },
          "valueType" : {
            "type" : "string",
            "description" : "A kind of value that the characteristic value can take on, such as numeric, text and so forth"
          },
          "isDefault" : {
            "type" : "boolean",
            "description" : "If true, the Boolean Indicates if the value is the default value for a characteristic"
          },
          "value" : {
            "$ref" : "#/components/schemas/Any"
          },
          "unitOfMeasure" : {
            "type" : "string",
            "description" : "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "valueFrom" : {
            "type" : "integer",
            "description" : "The low range value that a characteristic can take on",
            "format" : "int32"
          },
          "valueTo" : {
            "type" : "integer",
            "description" : "The upper range value that a characteristic can take on",
            "format" : "int32"
          },
          "rangeInterval" : {
            "type" : "string",
            "description" : "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
          },
          "regex" : {
            "type" : "string",
            "description" : "A regular expression constraint for given value"
          }
        },
        "description" : "A number or text that can be assigned to a ResourceSpecCharacteristic."
      },
      "ResourceSpecificationRelationship" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "atBaseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "atSchemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "atType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of target ResourceSpecification"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the target ResourceSpecification"
          },
          "defaultQuantity" : {
            "type" : "integer",
            "description" : "The default number of the related resource that should be instantiated, for example a rack would typically have 4 cards, although it could support more.",
            "format" : "int32"
          },
          "maximumQuantity" : {
            "type" : "integer",
            "description" : "The maximum number of the related resource that should be instantiated, for example a rack supports a maximum of 16 cards",
            "format" : "int32"
          },
          "minimumQuantity" : {
            "type" : "integer",
            "description" : "The minimum number of the related resource that should be instantiated, for example a rack must have at least 1 card",
            "format" : "int32"
          },
          "name" : {
            "type" : "string",
            "description" : "The name given to the target resource specification instance"
          },
          "relationshipType" : {
            "type" : "string",
            "description" : "Type of relationship such as migration, substitution, dependency, exclusivity"
          },
          "role" : {
            "type" : "string",
            "description" : "The association role for this resource specification"
          },
          "resourceSpecCharacteristic" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "A characteristic that refines the relationship. For example, consider the relationship between a slot and a card. For a half-height card it is important to know the position at which the card is inserted, so a characteristic Position might be defined on the relationship to allow capturing of this in the inventory",
            "items" : {
              "$ref" : "#/components/schemas/ResourceSpecificationCharacteristic"
            }
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "@baseType" : {
            "type" : "string"
          },
          "@schemaLocation" : {
            "type" : "string"
          },
          "@type" : {
            "type" : "string"
          }
        },
        "description" : "A migration, substitution, dependency or exclusivity relationship between/among resource specifications."
      },
      "TargetResourceSchema" : {
        "required" : [ "atSchemaLocation", "atType" ],
        "type" : "object",
        "properties" : {
          "atBaseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "atSchemaLocation" : {
            "type" : "string",
            "description" : "This field provides a link to the schema describing the target resource"
          },
          "atType" : {
            "type" : "string",
            "description" : "Class type of the target resource"
          },
          "@baseType" : {
            "type" : "string"
          },
          "@schemaLocation" : {
            "type" : "string"
          },
          "@type" : {
            "type" : "string"
          }
        },
        "description" : "The reference object to the schema and type of target resource which is described by resource specification"
      },
      "TimePeriod" : {
        "type" : "object",
        "properties" : {
          "endDateTime" : {
            "type" : "string",
            "description" : "End of the time period, using IETC-RFC-3339 format"
          },
          "startDateTime" : {
            "type" : "string",
            "description" : "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end"
          }
        },
        "description" : "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
      },
      "ResourceCandidateRef" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the resource candidate"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the entity"
          },
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of the resource candidate"
          },
          "version" : {
            "type" : "string",
            "description" : "Version of the resource candidate"
          }
        },
        "description" : "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none."
      },
      "ResourceCategoryCreate" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the category"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the category"
          },
          "@type" : {
            "type" : "string",
            "description" : "The (class) type of this category"
          },
          "@schemalLocation" : {
            "type" : "string",
            "description" : "This field provides a link to the schema describing this REST resource"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "Immediate base class type of this category"
          },
          "version" : {
            "type" : "string",
            "description" : "Category version"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "description" : "Used to indicate the current lifecycle status"
          },
          "parentId" : {
            "type" : "string",
            "description" : "Unique identifier of the parent category"
          },
          "isRoot" : {
            "type" : "boolean",
            "description" : "If true, this Boolean indicates that the category is a root of categories"
          },
          "category" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceCategoryRef"
            }
          },
          "resourceCandidate" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceCandidateRef"
            }
          },
          "relatedParty" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RelatedParty"
            }
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "description" : "The ServiceCategory to be created"
      },
      "ResourceCategoryRef" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "description" : "Unique reference of the entity"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the entity"
          },
          "id" : {
            "type" : "string",
            "description" : "Unique reference of the category"
          },
          "version" : {
            "type" : "string",
            "description" : "Category version"
          }
        },
        "description" : "Category reference. The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates."
      },
      "ResourceCategory" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "lastUpdate" : {
            "type" : "string",
            "description" : "Date and time of the last update"
          },
          "lifecycleStatusEnum" : {
            "type" : "string",
            "writeOnly" : true,
            "enum" : [ "In study", "In design", "In test", "Active", "Launched", "Retired", "Obsolete", "Rejected" ]
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "description" : "Unique reference of the entity"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the entity"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of this catalog"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "description" : "Used to indicate the current lifecycle status"
          },
          "version" : {
            "type" : "string",
            "description" : "Entity version"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of the category"
          },
          "parentId" : {
            "type" : "string",
            "description" : "Unique identifier of the parent category"
          },
          "isRoot" : {
            "type" : "boolean",
            "description" : "If true, this Boolean indicates that the category is a root of categories"
          },
          "category" : {
            "type" : "array",
            "description" : "List of child categories in the tree for in this category",
            "items" : {
              "$ref" : "#/components/schemas/ResourceCategoryRef"
            }
          },
          "resourceCandidate" : {
            "type" : "array",
            "description" : "List of resource candidates associated with this category",
            "items" : {
              "$ref" : "#/components/schemas/ResourceCandidateRef"
            }
          }
        },
        "description" : "The (resource) category resource is used to group resource candidates in logical containers. Categories can contain other categories."
      },
      "ResourceCatalogCreate" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the catalog"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of this catalog"
          },
          "@type" : {
            "type" : "string",
            "description" : "Indicates the (class) type of catalog. For resource catalogs, this will be 'ResourceCatalog'."
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "This field provides a link to the schema describing this REST resource"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "Indicates<b> </b>the base (class) type of this REST resource"
          },
          "version" : {
            "type" : "string",
            "description" : "Catalog version"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "description" : "Used to indicate the current lifecycle status"
          },
          "relatedParty" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RelatedParty"
            }
          },
          "category" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceCategoryRef"
            }
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "description" : "The Resource Catalog to be created"
      },
      "ResourceCatalog" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "lastUpdate" : {
            "type" : "string",
            "description" : "Date and time of the last update"
          },
          "lifecycleStatusEnum" : {
            "type" : "string",
            "writeOnly" : true,
            "enum" : [ "In study", "In design", "In test", "Active", "Launched", "Retired", "Obsolete", "Rejected" ]
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "description" : "Unique reference of the entity"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the entity"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of this catalog"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "description" : "Used to indicate the current lifecycle status"
          },
          "version" : {
            "type" : "string",
            "description" : "Entity version"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of the Catalog"
          },
          "relatedParty" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RelatedParty"
            }
          },
          "category" : {
            "type" : "array",
            "description" : "List of service categories associated with this catalog",
            "items" : {
              "$ref" : "#/components/schemas/ResourceCategoryRef"
            }
          }
        },
        "description" : "The root entity for resource catalog management. A resource catalog is a group of resource specifications made available through resource candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers)."
      },
      "ResourceCandidateCreate" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name given to this REST resource"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of this REST resource"
          },
          "@type" : {
            "type" : "string",
            "description" : "Class type of this REST resource"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "This field provides a link to the schema describing this REST resource"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "The (immediate) base class type of this REST resource"
          },
          "version" : {
            "type" : "string",
            "description" : "the version of resource candidate"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "description" : "Used to indicate the current lifecycle status of the resource candidate."
          },
          "category" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceCategoryRef"
            }
          },
          "resourceSpecification" : {
            "$ref" : "#/components/schemas/ResourceSpecificationRef"
          }
        },
        "description" : "The ResourceCandidate to be created"
      },
      "ResourceSpecificationRef" : {
        "type" : "object",
        "properties" : {
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "description" : "Unique reference of the entity"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the entity"
          },
          "version" : {
            "type" : "string",
            "description" : "Resource specification version"
          },
          "@referredType" : {
            "type" : "string",
            "description" : "The actual type of the target instance when needed for disambiguation."
          },
          "id" : {
            "type" : "string"
          }
        },
        "description" : "Resource Specification reference: The ResourceSpecification is required to realize a ProductSpecification."
      },
      "ResourceCandidate" : {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "lastUpdate" : {
            "type" : "string",
            "description" : "Date and time of the last update"
          },
          "lifecycleStatusEnum" : {
            "type" : "string",
            "writeOnly" : true,
            "enum" : [ "In study", "In design", "In test", "Active", "Launched", "Retired", "Obsolete", "Rejected" ]
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string"
          },
          "href" : {
            "type" : "string",
            "description" : "Unique reference of the entity"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the entity"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of this catalog"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "description" : "Used to indicate the current lifecycle status"
          },
          "version" : {
            "type" : "string",
            "description" : "Entity version"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of this REST resource"
          },
          "resourceSpecification" : {
            "$ref" : "#/components/schemas/ResourceSpecificationRef"
          },
          "category" : {
            "type" : "array",
            "description" : "The category specification implied by this candidate",
            "items" : {
              "$ref" : "#/components/schemas/ResourceCategoryRef"
            }
          }
        },
        "description" : "ResourceCandidate is an entity that makes a resource specification available to a catalog. A ResourceCandidate and its associated resource specification may be published - made visible - in any number of resource catalogs, or in none."
      },
      "ResourceSpecificationDeleteEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ResourceSpecificationDeleteEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ResourceSpecificationDeleteEventPayload" : {
        "type" : "object",
        "properties" : {
          "resourceSpecification" : {
            "$ref" : "#/components/schemas/ResourceSpecification"
          }
        },
        "description" : "The event data structure"
      },
      "EventSubscription" : {
        "required" : [ "callback", "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id of the listener"
          },
          "callback" : {
            "type" : "string",
            "description" : "The callback being registered."
          },
          "query" : {
            "type" : "string",
            "description" : "additional data to be passed"
          }
        },
        "description" : "Sets the communication endpoint address the service instance must use to deliver notification information"
      },
      "ResourceSpecificationCreateEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ResourceSpecificationCreateEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ResourceSpecificationCreateEventPayload" : {
        "type" : "object",
        "properties" : {
          "resourceSpecification" : {
            "$ref" : "#/components/schemas/ResourceSpecification"
          }
        },
        "description" : "The event data structure"
      },
      "ResourceSpecificationChangeEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ResourceSpecificationChangeEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ResourceSpecificationChangeEventPayload" : {
        "type" : "object",
        "properties" : {
          "resourceSpecification" : {
            "$ref" : "#/components/schemas/ResourceSpecification"
          }
        },
        "description" : "The event data structure"
      },
      "ResourceCategoryDeleteEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ResourceCategoryDeleteEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ResourceCategoryDeleteEventPayload" : {
        "type" : "object",
        "properties" : {
          "resourceCategory" : {
            "$ref" : "#/components/schemas/ResourceCategory"
          }
        },
        "description" : "The event data structure"
      },
      "ResourceCategoryCreateEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ResourceCategoryCreateEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ResourceCategoryCreateEventPayload" : {
        "type" : "object",
        "properties" : {
          "resourceCategory" : {
            "$ref" : "#/components/schemas/ResourceCategory"
          }
        },
        "description" : "The event data structure"
      },
      "ResourceCategoryChangeEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ResourceCategoryChangeEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ResourceCategoryChangeEventPayload" : {
        "type" : "object",
        "properties" : {
          "resourceCategory" : {
            "$ref" : "#/components/schemas/ResourceCategory"
          }
        },
        "description" : "The event data structure"
      },
      "ResourceCatalogDeleteEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ResourceCatalogDeleteEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ResourceCatalogDeleteEventPayload" : {
        "type" : "object",
        "properties" : {
          "resourceCatalog" : {
            "$ref" : "#/components/schemas/ResourceCatalog"
          }
        },
        "description" : "The event data structure"
      },
      "ResourceCatalogCreateEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ResourceCatalogCreateEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ResourceCatalogCreateEventPayload" : {
        "type" : "object",
        "properties" : {
          "resourceCatalog" : {
            "$ref" : "#/components/schemas/ResourceCatalog"
          }
        },
        "description" : "The event data structure"
      },
      "ResourceCatalogChangeEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ResourceCatalogChangeEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ResourceCatalogChangeEventPayload" : {
        "type" : "object",
        "properties" : {
          "resourceCatalog" : {
            "$ref" : "#/components/schemas/ResourceCatalog"
          }
        },
        "description" : "The event data structure"
      },
      "ResourceCandidateDeleteEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ResourceCandidateDeleteEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ResourceCandidateDeleteEventPayload" : {
        "type" : "object",
        "properties" : {
          "resourceCandidate" : {
            "$ref" : "#/components/schemas/ResourceCandidate"
          }
        },
        "description" : "The event data structure"
      },
      "ResourceCandidateCreateEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ResourceCandidateCreateEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ResourceCandidateCreateEventPayload" : {
        "type" : "object",
        "properties" : {
          "resourceCandidate" : {
            "$ref" : "#/components/schemas/ResourceCandidate"
          }
        },
        "description" : "The event data structure"
      },
      "ResourceCandidateChangeEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ResourceCandidateChangeEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ResourceCandidateChangeEventPayload" : {
        "type" : "object",
        "properties" : {
          "resourceCandidate" : {
            "$ref" : "#/components/schemas/ResourceCandidate"
          }
        },
        "description" : "The event data structure"
      },
      "ImportJob" : {
        "type" : "object",
        "properties" : {
          "atBaseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "atSchemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "atType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "id" : {
            "type" : "string",
            "description" : "Identifier of the import job"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the import job"
          },
          "completionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "contentType" : {
            "type" : "string",
            "description" : "Indicates the format of the imported data"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "errorLog" : {
            "type" : "string",
            "description" : "Reason for failure if status is failed"
          },
          "path" : {
            "type" : "string",
            "description" : "URL of the root resource where the content of the file specified by the import job must be applied"
          },
          "url" : {
            "type" : "string",
            "description" : "URL of the file containing the data to be imported"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "Not Started", "Running", "Succeeded", "Failed" ]
          },
          "@baseType" : {
            "type" : "string"
          },
          "@schemaLocation" : {
            "type" : "string"
          },
          "@type" : {
            "type" : "string"
          }
        },
        "description" : "Represents a task used to import resources from a file"
      },
      "ImportJobStateChangeEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ImportJobStateChangeEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ImportJobStateChangeEventPayload" : {
        "type" : "object",
        "properties" : {
          "importJob" : {
            "$ref" : "#/components/schemas/ImportJob"
          }
        },
        "description" : "The event data structure"
      },
      "ImportJobCreateEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ImportJobCreateEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ImportJobCreateEventPayload" : {
        "type" : "object",
        "properties" : {
          "importJob" : {
            "$ref" : "#/components/schemas/ImportJob"
          }
        },
        "description" : "The event data structure"
      },
      "ExportJob" : {
        "type" : "object",
        "properties" : {
          "atBaseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "atSchemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "atType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "id" : {
            "type" : "string",
            "description" : "Identifier of the export job"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the export job"
          },
          "completionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "contentType" : {
            "type" : "string",
            "description" : "The format of the exported data"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "errorLog" : {
            "type" : "string",
            "description" : "Reason for failure"
          },
          "path" : {
            "type" : "string",
            "description" : "URL of the root resource acting as the source for streaming content to the file specified by the export job"
          },
          "query" : {
            "type" : "string",
            "description" : "Used to scope the exported data"
          },
          "url" : {
            "type" : "string",
            "description" : "URL of the file containing the data to be exported"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "Not Started", "Running", "Succeeded", "Failed" ]
          },
          "@baseType" : {
            "type" : "string"
          },
          "@schemaLocation" : {
            "type" : "string"
          },
          "@type" : {
            "type" : "string"
          }
        },
        "description" : "Represents a task used to export resources to a file"
      },
      "ExportJobStateChangeEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ExportJobStateChangeEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ExportJobStateChangeEventPayload" : {
        "type" : "object",
        "properties" : {
          "exportJob" : {
            "$ref" : "#/components/schemas/ExportJob"
          }
        },
        "description" : "The event data structure"
      },
      "ExportJobCreateEvent" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the Process flow"
          },
          "href" : {
            "type" : "string",
            "description" : "Reference of the ProcessFlow"
          },
          "eventId" : {
            "type" : "string",
            "description" : "The identifier of the notification."
          },
          "eventTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "eventType" : {
            "type" : "string",
            "description" : "The type of the notification."
          },
          "correlationId" : {
            "type" : "string",
            "description" : "The correlation id for this event."
          },
          "domain" : {
            "type" : "string",
            "description" : "The domain of the event."
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the event."
          },
          "description" : {
            "type" : "string",
            "description" : "An explnatory of the event."
          },
          "priority" : {
            "type" : "string",
            "description" : "A priority."
          },
          "timeOcurred" : {
            "type" : "string",
            "format" : "date-time"
          },
          "event" : {
            "$ref" : "#/components/schemas/ExportJobCreateEventPayload"
          }
        },
        "description" : "The event data"
      },
      "ExportJobCreateEventPayload" : {
        "type" : "object",
        "properties" : {
          "exportJob" : {
            "$ref" : "#/components/schemas/ExportJob"
          }
        },
        "description" : "The event data structure"
      },
      "EventSubscriptionInput" : {
        "required" : [ "callback" ],
        "type" : "object",
        "properties" : {
          "callback" : {
            "type" : "string",
            "description" : "The callback being registered."
          },
          "query" : {
            "type" : "string",
            "description" : "additional data to be passed"
          }
        },
        "description" : "Data containing the callback endpoint to deliver the information"
      },
      "ImportJobCreate" : {
        "required" : [ "url" ],
        "type" : "object",
        "properties" : {
          "atBaseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "atSchemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "atType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "completionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "contentType" : {
            "type" : "string",
            "description" : "Indicates the format of the imported data"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "errorLog" : {
            "type" : "string",
            "description" : "Reason for failure if status is failed"
          },
          "path" : {
            "type" : "string",
            "description" : "URL of the root resource where the content of the file specified by the import job must be applied"
          },
          "url" : {
            "type" : "string",
            "description" : "URL of the file containing the data to be imported"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "Not Started", "Running", "Succeeded", "Failed" ]
          },
          "@baseType" : {
            "type" : "string"
          },
          "@schemaLocation" : {
            "type" : "string"
          },
          "@type" : {
            "type" : "string"
          }
        },
        "description" : "The ImportJob to be created"
      },
      "ExportJobCreate" : {
        "required" : [ "url" ],
        "type" : "object",
        "properties" : {
          "atBaseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "atSchemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "atType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          },
          "completionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "contentType" : {
            "type" : "string",
            "description" : "The format of the exported data"
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "errorLog" : {
            "type" : "string",
            "description" : "Reason for failure"
          },
          "path" : {
            "type" : "string",
            "description" : "URL of the root resource acting as the source for streaming content to the file specified by the export job"
          },
          "query" : {
            "type" : "string",
            "description" : "Used to scope the exported data"
          },
          "url" : {
            "type" : "string",
            "description" : "URL of the file containing the data to be exported"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "Not Started", "Running", "Succeeded", "Failed" ]
          },
          "@baseType" : {
            "type" : "string"
          },
          "@schemaLocation" : {
            "type" : "string"
          },
          "@type" : {
            "type" : "string"
          }
        },
        "description" : "The ExportJob to be created"
      },
      "ResourceSpecificationUpdate" : {
        "type" : "object",
        "properties" : {
          "category" : {
            "type" : "string",
            "description" : "Category of the target resource like NetworkConnectivity, PhysicalLinks, Generic, L2Network and so on."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of this REST resource"
          },
          "isBundle" : {
            "type" : "boolean",
            "description" : "A flag indicates that if this resource specification is a bundled specification (true) or single (false)."
          },
          "lifecycleStatus" : {
            "type" : "string",
            "description" : "Used to indicate the current lifecycle status of the resource specification"
          },
          "name" : {
            "type" : "string",
            "description" : "Name given to this REST resource"
          },
          "version" : {
            "type" : "string",
            "description" : "Resource Specification version"
          },
          "attachment" : {
            "type" : "array",
            "description" : "Complements the description of an element (for instance a resource) through video, pictures ...",
            "items" : {
              "$ref" : "#/components/schemas/AttachmentRefOrValue"
            }
          },
          "featureSpecification" : {
            "type" : "array",
            "description" : "A list of Features for this specification.",
            "items" : {
              "$ref" : "#/components/schemas/FeatureSpecification"
            }
          },
          "relatedParty" : {
            "type" : "array",
            "description" : "A related party defines party or party role linked to a specific entity.",
            "items" : {
              "$ref" : "#/components/schemas/RelatedParty"
            }
          },
          "resourceSpecCharacteristic" : {
            "type" : "array",
            "description" : "A characteristic quality or distinctive feature of a ResourceSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process.",
            "items" : {
              "$ref" : "#/components/schemas/ResourceSpecificationCharacteristic"
            }
          },
          "resourceSpecRelationship" : {
            "type" : "array",
            "description" : "A migration, substitution, dependency or exclusivity relationship between/among resource specifications.",
            "items" : {
              "$ref" : "#/components/schemas/ResourceSpecificationRelationship"
            }
          },
          "targetResourceSchema" : {
            "$ref" : "#/components/schemas/TargetResourceSchema"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the super-class"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "A URI to a JSON-Schema file that defines additional attributes and relationships"
          },
          "@type" : {
            "type" : "string",
            "description" : "When sub-classing, this defines the sub-class entity name"
          }
        },
        "description" : "The ResourceSpecification to be updated"
      },
      "ResourceCategoryUpdate" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the category"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the category"
          },
          "@type" : {
            "type" : "string",
            "description" : "The (class) type of this category"
          },
          "@schemalLocation" : {
            "type" : "string",
            "description" : "This field provides a link to the schema describing this REST resource"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "Immediate base class type of this category"
          },
          "version" : {
            "type" : "string",
            "description" : "Category version"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "description" : "Used to indicate the current lifecycle status"
          },
          "parentId" : {
            "type" : "string",
            "description" : "Unique identifier of the parent category"
          },
          "isRoot" : {
            "type" : "boolean",
            "description" : "If true, this Boolean indicates that the category is a root of categories"
          },
          "category" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceCategoryRef"
            }
          },
          "resourceCandidate" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceCandidateRef"
            }
          },
          "relatedParty" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RelatedParty"
            }
          }
        },
        "description" : "The ResourceCategory to be updated"
      },
      "ResourceCatalogUpdate" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the catalog"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of this catalog"
          },
          "@type" : {
            "type" : "string",
            "description" : "Indicates the (class) type of catalog. For resource catalogs, this will be 'ResourceCatalog'."
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "This field provides a link to the schema describing this REST resource"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "Indicates<b> </b>the base (class) type of this REST resource"
          },
          "version" : {
            "type" : "string",
            "description" : "Catalog version"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "description" : "Used to indicate the current lifecycle status"
          },
          "relatedParty" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RelatedParty"
            }
          },
          "category" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceCategoryRef"
            }
          }
        },
        "description" : "The ResourceCatalog to be updated"
      },
      "ResourceCandidateUpdate" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name given to this REST resource"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of this REST resource"
          },
          "@type" : {
            "type" : "string",
            "description" : "Class type of this REST resource"
          },
          "@schemaLocation" : {
            "type" : "string",
            "description" : "This field provides a link to the schema describing this REST resource"
          },
          "@baseType" : {
            "type" : "string",
            "description" : "The (immediate) base class type of this REST resource"
          },
          "version" : {
            "type" : "string",
            "description" : "the version of resource candidate"
          },
          "validFor" : {
            "$ref" : "#/components/schemas/TimePeriod"
          },
          "lastUpdate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lifecycleStatus" : {
            "type" : "string",
            "description" : "Used to indicate the current lifecycle status of the resource candidate."
          },
          "category" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceCategoryRef"
            }
          },
          "resourceSpecification" : {
            "$ref" : "#/components/schemas/ResourceSpecificationRef"
          }
        },
        "description" : "The ResourceCandidate to be updated"
      }
    },
    "securitySchemes" : {
      "security_auth" : {
        "type" : "oauth2",
        "scheme" : "bearer",
        "bearerFormat" : "JWT",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://openslice-1.euprojects.net/auth/realms/openslice/protocol/openid-connect/auth",
            "tokenUrl" : "https://openslice-1.euprojects.net/auth/realms/openslice/protocol/openid-connect/token",
            "scopes" : {
              "read" : "read scope",
              "write" : "write scope"
            }
          }
        }
      }
    }
  }
}
